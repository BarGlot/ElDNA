///////////////////////////////////////////////////////////////////////////////
//Copyright (C) 1999-2009 Anatoly Sorokin
//
//---------------------------------------------------------------------------
//Этот класс является частью библиотеки eDNA.
//
//Использование данной библиотеки 
//Авторские права на эту библиотеку принадлежат Анатолию Сорокину
//Все права защищены
//////////////////////////////////////////////////////////////////////////////
package ru.icb.promodel.edna;

import java.util.Map;

/**
 * Класс, реализующий базовые функции билдера. Основная задача класса - выбор
 * состояний в соответствии с первичной последовательностью и добавление их к
 * коллектору.
 * 
 * @author asorokin
 * 
 */
public interface IStateMachine {
	/**
	 * Объявить набор шаблонов, которые будут использоваться для рассчетов.
	 * 
	 * @param map
	 *            набор из четырех шаблонов для нуклеотидов A,T,G,C.
	 */
	void setTemplates(Map<String, IState> map);

	/**
	 * Возвращает коллектор. Коллектор содержит данные обо всех нуклеотидах
	 * добавленных до вызова функции.
	 * 
	 * @return ссылка на коллектор. Состояние класса может меняться при
	 *         последующих вызовах функции {@link #addChar(char)}.
	 */
	ICollector getCollegtor();

	/**
	 * Инициализирует билдер. Объявляет новый коллектор и сбрасывает все состояния.
	 * 
	 * @param c
	 */
	void init(String c);

	/**
	 * Добавляет новый нуклеотид в список обработанных состояний.
	 * @param c
	 */
	void addChar(String c);

	/**
	 * Выставляет начало отсчета в цент конкретного нуклеотида. Выбранный
	 * нуклеотид должен быть уже добавлен в список обработанных стейтов. По
	 * умолчанию, начало отсчета расположенно в центре первого (нулевого)
	 * нуклеотида.
	 * 
	 * @param o
	 *            пололжение начала отсчета координат по оси z в
	 *            последовательности.
	 * @throws IllegalStateException
	 *             в случае если нуклеотид не был добавлен.
	 * @throws IllegalArgumentException
	 *             в случае если аргумент меньше нуля.
	 */
	void setOrigin(int o) throws IllegalStateException,
			IllegalArgumentException;
}
